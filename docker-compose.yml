version: "3.9"

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER:     ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB:       ${POSTGRES_DB}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}" ]
      interval: 5s
      retries: 5

  migrate:
    image: migrate/migrate:v4.18.3
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_USER:     ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB:       ${POSTGRES_DB}
      POSTGRES_HOST:     db
      POSTGRES_PORT:     ${POSTGRES_PORT:-5432}
    volumes:
      - ./migrations:/migrations
    command: >
      -path /migrations
      -database postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT:-5432}/${POSTGRES_DB}?sslmode=disable
      up

  redis:
    image: redis:7-alpine
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 5s
      retries: 3

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    image: weather-api:latest
    environment:
      # Postgres
      POSTGRES_USER:     ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB:       ${POSTGRES_DB}
      POSTGRES_HOST:     db
      POSTGRES_PORT:     ${POSTGRES_PORT:-5432}

      # SMTP
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}

      # Weather API keys
      WEATHERAPI_COM_API_KEY:    ${WEATHERAPI_COM_API_KEY}
      OPENWEATHERMAP_ORG_API_KEY: ${OPENWEATHERMAP_ORG_API_KEY}

      # Redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_ADDR:     ${REDIS_ADDR:-redis:6379}

      # App
      BASE_URL: ${BASE_URL}

      # To forward Gin release mode
      GIN_MODE: ${GIN_MODE}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: unless-stopped

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.scheduler
    image: email-scheduler:latest
    environment:
      # Postgres
      POSTGRES_USER:     ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB:       ${POSTGRES_DB}
      POSTGRES_HOST:     db
      POSTGRES_PORT:     ${POSTGRES_PORT:-5432}

      # SMTP
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}

      # Weather API keys
      WEATHERAPI_COM_API_KEY:    ${WEATHERAPI_COM_API_KEY}
      OPENWEATHERMAP_ORG_API_KEY: ${OPENWEATHERMAP_ORG_API_KEY}

      # Redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_ADDR:     ${REDIS_ADDR:-redis:6379}

      # App
      BASE_URL: ${BASE_URL}

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  db-data:
